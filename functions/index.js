// index.js
// --------
// –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞ Express, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS, session, Passport —Ç–∞ API-—Ä–æ—É—Ç—ñ–≤.

require("dotenv").config(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env (—è–∫—â–æ —î –ª–æ–∫–∞–ª—å–Ω–æ) –∞–±–æ –±–µ—Ä–µ–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

const path = require("path");
const express = require("express");
const cors = require("cors");
const session = require("express-session");
const passport = require("passport");

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ Firestore —Ç–∞ admin —ñ–∑ firebaseAdmin.js
const { db, admin } = require("./firebaseAdmin");

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
const authRoutes = require("./auth");

const app = express();
const PORT = process.env.PORT || 3000;

// ======================
// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS
// ======================
// –î–æ–∑–≤–æ–ª—è—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (process.env.FRONTEND_URL) —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç–∏ –∑ –∫—É–∫–∞–º–∏
const corsOptions = {
  origin: process.env.FRONTEND_URL || "https://dsskord.onrender.com",
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  credentials: true,
};
app.use(cors(corsOptions));

// ======================
// Middleware
// ======================
app.use(express.json()); // –¥–ª—è application/json
// –Ø–∫—â–æ —É –≤–∞—Å —î —Ñ–æ—Ä–º–∞ –∑ enctype="application/x-www-form-urlencoded", –¥–æ–¥–∞–π—Ç–µ —Ç–∞–∫–æ–∂:
// app.use(express.urlencoded({ extended: true }));

// Express static –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
// –ü—Ä–∏–ø—É—â–µ–Ω–Ω—è: –ø–∞–ø–∫–∞ public/ –ª–µ–∂–∏—Ç—å –ø–æ—Ä—è–¥ —ñ–∑ index.js (—É –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ—î–∫—Ç—É)
app.use(express.static(path.join(__dirname, "public")));

// ======================
// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ–π (–¥–æ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ–∫—Å—ñ –Ω–∞ Render)
// ======================
app.set("trust proxy", 1);

app.use(
  session({
    secret: process.env.SESSION_SECRET || "–ó–ê–ú–Ü–ù–ò_–¶–ï–ô_–î–£–ñ–ï_–°–ï–ö–†–ï–¢–ù–ò–ô_–ö–õ–Æ–ß_–£_–ü–†–û–î–ê–ö–®–ù",
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: process.env.NODE_ENV === "production", // —è–∫—â–æ prod ‚Äî –ª–∏—à–µ HTTPS
      httpOnly: true,
      sameSite: "lax",
    },
  })
);

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Passport
app.use(passport.initialize());
app.use(passport.session());

// ======================
// 1) –†–æ—É—Ç–µ—Ä–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
// ======================
app.use("/auth", authRoutes);

// ======================
// 2) –Ü–Ω—à—ñ API-—Ä–æ—É—Ç–µ—Ä–∏
// ======================

// 2.1. /tap ‚Äî ‚Äú–Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è‚Äù (–∑–±—ñ–ª—å—à—É—î –º–æ–Ω–µ—Ç–∏ –≤ Firestore)
app.post("/tap", async (req, res) => {
  try {
    const { userId } = req.body;
    if (!userId) {
      return res.status(400).json({ success: false, message: "Missing userId" });
    }

    const userRef = db.collection("users").doc(userId);
    const doc = await userRef.get();
    const tapRewardAmount = 1;

    if (!doc.exists) {
      console.warn(`User ${userId} not found for /tap. Creating with initial tap.`);
      await userRef.set({
        coins: tapRewardAmount,
        capsules: [],
        lastClaim: 0,
      });
      return res.json({ success: true, coins: tapRewardAmount });
    } else {
      const currentCoins = doc.data().coins || 0;
      const newCoins = currentCoins + tapRewardAmount;
      await userRef.update({ coins: newCoins });
      return res.json({ success: true, coins: newCoins });
    }
  } catch (error) {
    console.error("Error in /tap:", error);
    return res.status(500).json({ success: false, message: "Internal server error" });
  }
});

// 2.2. /claim ‚Äî –≤–∏–¥–∞—á–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É (coins –∞–±–æ capsule)
app.post("/claim", async (req, res) => {
  try {
    const { userId, day } = req.body;
    if (!userId || typeof day !== "number") {
      return res
        .status(400)
        .json({ success: false, message: "Missing userId or claim day" });
    }

    const userRef = db.collection("users").doc(userId);
    const doc = await userRef.get();
    if (!doc.exists) {
      return res.status(404).json({ success: false, message: "User not found" });
    }

    const userData = doc.data();
    const dailyRewardsConfig = [
      { day: 1, coins: 125, type: "coins" },
      { day: 7, capsule: "diamond", type: "capsule" },
    ];
    const rewardConfig = dailyRewardsConfig.find((r) => r.day === day);
    if (!rewardConfig) {
      return res
        .status(400)
        .json({ success: false, message: "Invalid claim day" });
    }

    let updateData = {};
    let rewardGiven;

    if (rewardConfig.type === "coins") {
      // –î–ª—è FieldValue.increment() —ñ–º–ø–æ—Ä—Ç—É–≤–∞–ª–∏ admin —É —Ü—å–æ–º—É —Ñ–∞–π–ª—ñ
      updateData.coins = admin.firestore.FieldValue.increment(
        rewardConfig.coins
      );
      rewardGiven = rewardConfig.coins;
    } else if (rewardConfig.type === "capsule") {
      updateData.capsules = admin.firestore.FieldValue.arrayUnion({
        type: rewardConfig.capsule,
        timestamp: Date.now(),
      });
      rewardGiven = rewardConfig.capsule;
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç–∞ –¥–æ–≤–∂–∏–Ω—É —Å—Ç—Ä–∏–∂–∫–∏
    updateData["claim.lastClaim"] = new Date().toISOString().split("T")[0];
    updateData["claim.streak"] = day;

    await userRef.update(updateData);

    const updatedDoc = await userRef.get();
    res.json({
      success: true,
      reward: rewardGiven,
      newStreak: updatedDoc.data().claim.streak,
      coins: updatedDoc.data().coins,
    });
  } catch (error) {
    console.error("Error in /claim:", error);
    return res.status(500).json({ success: false, message: "Internal server error" });
  }
});

// 2.3. /balance ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç
app.get("/balance", async (req, res) => {
  try {
    const { userId } = req.query;
    if (!userId) {
      return res.status(400).json({ success: false, message: "Missing userId" });
    }
    const doc = await db.collection("users").doc(userId).get();
    if (!doc.exists) {
      return res.status(404).json({ success: false, message: "User not found" });
    }
    res.json({ success: true, coins: doc.data().coins || 0 });
  } catch (error) {
    console.error("Error in /balance:", error);
    return res.status(500).json({ success: false, message: "Internal server error" });
  }
});

// 2.4. /capsule ‚Äî –¥–æ–¥–∞—î –∫–∞–ø—Å—É–ª—É –≤ –º–∞—Å–∏–≤ capsules
app.post("/capsule", async (req, res) => {
  try {
    const { userId, type } = req.body;
    if (!userId || !type) {
      return res
        .status(400)
        .json({ success: false, message: "Missing userId or type" });
    }

    const userRef = db.collection("users").doc(userId);
    // –û–Ω–æ–≤–ª—é—î–º–æ –º–∞—Å–∏–≤ capsules —á–µ—Ä–µ–∑ FieldValue.arrayUnion
    await userRef.update({
      capsules: admin.firestore.FieldValue.arrayUnion({
        type,
        timestamp: Date.now(),
      }),
    });

    const updatedDoc = await userRef.get();
    res.json({ success: true, capsules: updatedDoc.data().capsules || [] });
  } catch (error) {
    console.error("Error in /capsule:", error);
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä–∏–º–æ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –º–∞—Å–∏–≤–æ–º capsules
    if (error.code === 5) {
      try {
        await db.collection("users").doc(req.body.userId).set({
          coins: 0,
          capsules: [{ type: req.body.type, timestamp: Date.now() }],
        });
        const newUserDoc = await db.collection("users").doc(req.body.userId).get();
        return res.json({ success: true, capsules: newUserDoc.data().capsules });
      } catch (createError) {
        console.error("Error creating user during /capsule:", createError);
        return res
          .status(500)
          .json({ success: false, message: "Internal server error during user creation" });
      }
    }
    return res.status(500).json({ success: false, message: "Internal server error" });
  }
});

// ======================
// 3) –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (—ñ–Ω–¥–µ–∫—Å–Ω–∏–π HTML)
// ======================
// –ú–∞—î —Å—Ç–æ—è—Ç–∏ –ü–Ü–°–õ–Ø —ñ–Ω—à–∏—Ö GET-–º–∞—Ä—à—Ä—É—Ç—ñ–≤, —â–æ–± —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏ –Ω–∞ –≤—Å—ñ –Ω–µ—Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ GET-–∑–∞–ø–∏—Ç–∏.
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// ======================
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ======================
app.listen(PORT, () => {
  console.log(`üü¢ Server running at http://localhost:${PORT}`);
  console.log(
    `üîë Session secret configured: ${
      process.env.SESSION_SECRET ? "From ENV (OK)" : '"–ó–ê–ú–Ü–ù–ò_–¶–ï–ô_–ö–õ–Æ–ß" (DEFAULT!)'
    }`
  );
  console.log(`üåê CORS configured for origin: ${corsOptions.origin}`);
  if (
    process.env.NODE_ENV !== "production" &&
    (!process.env.SESSION_SECRET ||
      process.env.SESSION_SECRET === "–ó–ê–ú–Ü–ù–ò_–¶–ï–ô_–î–õ–Ø_–ü–†–û–î–ê–ö–®–ù")
  ) {
    console.warn(
      "‚ö†Ô∏è WARNING: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π SESSION_SECRET —É –ù–ï-–ü–†–û–î–ê–ö–®–ù —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ."
    );
  }
});
